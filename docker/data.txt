image - code runstime systools and libraries

container - takes instructions from the image to do the app or what it has to 
there can be multiple contianers from an image 

volume - a persistent data storage mechanism that allows data to be shared between a docker container and a host machine, it ensures data durability and persistence even if the container is stopped or remove


network - a commu chanell that allows dif containers to talk to each other or with the external world 



docker client where we issue instructions workflow is distributed into 3 parts 
docker client - the user interface for interacting with docker the tool we use to give docker commands or a gui instructing it to build run or manage images

docker host - docker daemon it manages containers on host sys, listens for commands, build images and handle docker related tasks 
 
docker registry - dockerhub - a centralized repo of docker images


docker image is created with the dockerfile this file tells docker how to build an image for ur app 
examples of some commands 

FROM image[:tag] [AS name]
this is  the base image 
FROM ubuntu:20.04

workdir 

WORKDIR /path/to/workdir 
it sets the working directory for the ff instructions 



copy 
copies the files or directories from the build context to the image 

COPY [--chown=<user>:<group>] <src>... <dest>



run 
executes the command in shell during image build
RUN <command> 

RUN npm run dev



EXPOSE <port> [<port>/<protocol>...]

Expose 3000

it informs docker the contianer  would listen on the specified port number at runstime



ENV KEY=VALUE 

example to set env variables
ENV NODE_ENV=production 


args are build time variables 


VOLUME 
create a mount point for externally mounted folders 


CMD 
provides diff commands to execute when the container start 

CMD ["param1", "param2"]


ENTRYPOINT 
specifies the default executable to be run when the container starts 

CMD npm run dev 

ENTRYPOINT not the same as cmd, cmd is flexible and can be overwrittern entrypoint cannot be easily overwrittern 


think of cmd as a default executable and entrypoint as a fixed starting point 



create your own image


docker build -t hello-docker .


docker run -it docker-name sh 
to get into shell


u build first then run it with docker included 


to run with port mapping 

docker run -p 5137:5137 react-docker 


allow updates to reflect immediately 


telling docker to mount the current working directory where we run docker run command  into the app container 
this let local code be linked to container and changes made locally are reflected inside running container 

-v stands for volume we are creating a volume to keep track of all those changes
we also create a volume to mount our node moudles with the last -v so that the container uses the existing node modules     


for linux
docker run -p 5173:5173 -v "$(pwd):/app"  -v /app/node_modules react-docker


for windows -use powershell
docker run -p 5173:5173 -v "${PWD}:/app" -v /app/node_modules react-docker


how to publish app

docker login 
docker tag react-docker your-username/name-of-image
docker push your-username/name-of-container 


doing all these is tedious so we can improve with docker compose


docker compose allows us define and manage multi docker contianer applications using yaml file to configure services, network, volumes enabling us to run inscale the entire app in a single command

with just docker compose up


docker also provides a cli to generate the files for us its called docker init 
just run 
docker init


docker compose watch
watches for updates and handles it automatically

with it we can do three things 

syncing making sure everything stays up to date in realtime - this is handly when working on real app 

rebuild - it starts with the creation of new container images then it updates the services this is beneficial when rolling out changes to app in production - guranting the most recent version of the code is in production 

sync-restart - merges the sync and rebuild process it begins by syncing modifications from the host file sys to the container parts and then restarting the container this is beneficial during dev and testing of apps to ensure immediate reflection of changes in the running applications


after running docker compose up if u want changes made to reflect instantly run 
docker compose watch


docker scout is a tool that lets us be proactive about security 
it scans our continer images looks at all the layers and software pieces like building block and creates a detailed list called (sbom) software bill of materials 

we can use docker scout thru docker desktop, docker cli and docker hub